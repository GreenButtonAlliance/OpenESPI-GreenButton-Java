# Docker Compose for OpenESPI Authorization Server
# Development and testing environment setup
version: '3.8'

services:
  # OpenESPI Authorization Server
  authserver:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: espi-authserver
    ports:
      - "8080:8080"   # Application port
      - "8081:8081"   # Management port
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: docker
      
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/espi_authserver?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: espi_user
      SPRING_DATASOURCE_PASSWORD: espi_password
      
      # JPA Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false
      
      # Flyway Configuration
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration/mysql
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      
      # Security Configuration
      ESPI_SECURITY_REQUIRE_HTTPS: false
      ESPI_SECURITY_CERTIFICATE_ENABLE_CERTIFICATE_AUTHENTICATION: false
      
      # DataCustodian Integration
      ESPI_DATACUSTODIAN_BASE_URL: http://datacustodian:8080/DataCustodian
      
      # Logging
      LOGGING_LEVEL_ORG_GREENBUTTONALLIANCE: DEBUG
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: INFO
      
      # JVM Options
      JAVA_OPTS: "-Xms256m -Xmx512m -XX:+UseG1GC"
    volumes:
      - authserver-logs:/app/logs
      - authserver-config:/app/config
      - authserver-certificates:/app/certificates
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - espi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MySQL Database
  mysql:
    image: mysql:8.4
    container_name: espi-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: espi_authserver
      MYSQL_USER: espi_user
      MYSQL_PASSWORD: espi_password
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf:/etc/mysql/conf.d
    networks:
      - espi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "espi_user", "-pespi_password"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: 
      - mysqld
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password

  # PostgreSQL Database (Alternative)
  postgresql:
    image: postgres:16-alpine
    container_name: espi-postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: espi_authserver
      POSTGRES_USER: espi_user
      POSTGRES_PASSWORD: espi_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./postgresql/init:/docker-entrypoint-initdb.d
    networks:
      - espi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U espi_user -d espi_authserver"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - postgresql

  # Redis for Session Storage (Optional)
  redis:
    image: redis:7-alpine
    container_name: espi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - espi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - redis

  # NGINX Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: espi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - authserver
    networks:
      - espi-network
    restart: unless-stopped
    profiles:
      - nginx

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: espi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - espi-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: espi-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - espi-network
    restart: unless-stopped
    profiles:
      - monitoring

  # DataCustodian (for integration testing)
  datacustodian:
    image: greenbuttonalliance/datacustodian:latest
    container_name: espi-datacustodian
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/espi_datacustodian?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: espi_user
      SPRING_DATASOURCE_PASSWORD: espi_password
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - espi-network
    restart: unless-stopped
    profiles:
      - datacustodian

networks:
  espi-network:
    driver: bridge
    name: espi-network

volumes:
  # Application volumes
  authserver-logs:
    name: espi-authserver-logs
  authserver-config:
    name: espi-authserver-config
  authserver-certificates:
    name: espi-authserver-certificates
  
  # Database volumes
  mysql-data:
    name: espi-mysql-data
  postgresql-data:
    name: espi-postgresql-data
  redis-data:
    name: espi-redis-data
  
  # Monitoring volumes
  prometheus-data:
    name: espi-prometheus-data
  grafana-data:
    name: espi-grafana-data
  
  # Infrastructure volumes
  nginx-logs:
    name: espi-nginx-logs
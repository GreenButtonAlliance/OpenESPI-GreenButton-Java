name: CI/CD Pipeline

# Enterprise-grade CI/CD pipeline for OpenESPI Authorization Server
# Based on OpenESPI-Common main branch standards with ESPI-specific enhancements

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: -Xmx3200m

jobs:
  test:
    name: Test and Security Scan
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: oauth2_authserver
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Verify Maven installation
      run: |
        mvn --version
        java --version

    - name: Run Maven compile
      run: mvn clean compile -P dev-mysql
      id: compile

    - name: Run unit tests
      run: mvn test -P dev-mysql
      continue-on-error: false

    - name: Run integration tests
      run: mvn verify -P testcontainers-mysql
      continue-on-error: true
      id: integration-tests

    - name: Generate test reports
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: target/surefire-reports/*.xml,target/failsafe-reports/*.xml
        reporter: java-junit
        fail-on-error: false

    - name: Generate JaCoCo test coverage report
      run: mvn jacoco:report jacoco:report-integration
      if: always()

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run security vulnerability scan
      run: |
        timeout 300 mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DskipSystemScope=false \
          -DsuppressionFile=owasp-suppressions.xml || echo "⚠️ OWASP scan completed with findings"
      continue-on-error: true

    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: target/dependency-check-report.html
        retention-days: 30

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Build JAR with tests
      run: mvn clean package -P dev-mysql

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jar-artifacts
        path: target/*.jar
        retention-days: 30

    - name: Upload JaCoCo coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jacoco-reports
        path: target/site/jacoco/
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          mvn sonar:sonar \
            -Dsonar.projectKey=GreenButtonAlliance_OpenESPI-AuthorizationServer-java \
            -Dsonar.organization=greenbuttonalliance \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN \
            -P dev-mysql || true
        else
          echo "⚠️ SONAR_TOKEN not configured, skipping SonarCloud analysis"
        fi

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: openespi-authorization-server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: 'openespi-authorization-server:latest'
        format: 'sarif'
        output: 'trivy-container-results.sarif'

    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-container-results.sarif'

  oauth2-integration-tests:
    name: OAuth2 Flow Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: oauth2_authserver
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifacts
        path: target/

    - name: Start Authorization Server
      run: |
        java -jar target/OpenESPI-AuthorizationServer-*.jar --spring.profiles.active=dev-mysql &
        echo $! > authserver.pid
        sleep 30  # Wait for startup

    - name: Test OAuth2 authorization_code flow
      run: |
        # Test authorization endpoint
        curl -f "http://localhost:9999/oauth2/authorize?response_type=code&client_id=third_party&redirect_uri=http://localhost:9090/callback&scope=openid&state=test" || echo "Authorization endpoint test failed"
        
        # Test token endpoint discovery
        curl -f "http://localhost:9999/.well-known/oauth-authorization-server" || echo "Discovery endpoint test failed"
        
        # Test JWKS endpoint
        curl -f "http://localhost:9999/oauth2/jwks" || echo "JWKS endpoint test failed"

    - name: Test client registration endpoint
      run: |
        # Test dynamic client registration
        curl -X POST "http://localhost:9999/connect/register" \
          -H "Content-Type: application/json" \
          -d '{"client_name":"Test Client","redirect_uris":["http://localhost:9090/callback"]}' || echo "Client registration test failed"

    - name: Test admin endpoints
      run: |
        # Test admin client listing
        curl -f "http://localhost:9999/admin/oauth2/clients" || echo "Admin clients endpoint test failed"

    - name: Stop Authorization Server
      if: always()
      run: |
        if [ -f authserver.pid ]; then
          kill $(cat authserver.pid) || true
          rm authserver.pid
        fi

    - name: Upload integration test logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: oauth2-integration-logs
        path: |
          logs/
          *.log
        retention-days: 7
# OpenESPI Authorization Server Production Configuration
# Spring Boot 3.5 OAuth2 Authorization Server - HTTPS Enforced

server:
  port: ${SERVER_PORT:8443}
  servlet:
    context-path: /
  # SSL Configuration for HTTPS - NAESB ESPI 4.0 Compliance (TLS 1.3 Only)
  ssl:
    enabled: ${SSL_ENABLED:true}
    key-store: ${SSL_KEYSTORE_PATH:classpath:keystore.p12}
    key-store-password: ${SSL_KEYSTORE_PASSWORD}
    key-store-type: ${SSL_KEYSTORE_TYPE:PKCS12}
    key-alias: ${SSL_KEY_ALIAS:oauth2-authserver}
    protocol: TLSv1.3
    enabled-protocols: TLSv1.3
    # NAESB ESPI 4.0 Approved TLS 1.3 Cipher Suites Only
    ciphers: TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256
    # Additional TLS 1.3 security settings
    client-auth: ${SSL_CLIENT_AUTH:none}
    trust-store: ${SSL_TRUSTSTORE_PATH:}
    trust-store-password: ${SSL_TRUSTSTORE_PASSWORD:}
    trust-store-type: ${SSL_TRUSTSTORE_TYPE:PKCS12}

spring:
  application:
    name: openespi-authorization-server
  
  profiles:
    active: prod
  
  # Security Configuration - HTTPS Enforced
  security:
    oauth2:
      authorizationserver:
        issuer: ${OAUTH2_ISSUER:https://localhost:8443}
        endpoint:
          authorization-uri: /oauth2/authorize
          token-uri: /oauth2/token
          jwk-set-uri: /oauth2/jwks
          token-revocation-uri: /oauth2/revoke
          token-introspection-uri: /oauth2/introspect
    # Force HTTPS for all security operations
    require-ssl: ${SECURITY_REQUIRE_SSL:true}
    headers:
      # HTTP Strict Transport Security (HSTS)
      frame-options: DENY
      content-type-options: nosniff
      xss-protection: 1; mode=block
      # HSTS Configuration
      http-strict-transport-security:
        max-age: 31536000
        include-subdomains: true
        preload: true
  
  # Database Configuration - Production MySQL with TLS 1.3
  datasource:
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/oauth2_authserver?useSSL=true&requireSSL=true&verifyServerCertificate=true&tlsVersions=TLSv1.3&useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC}
    username: ${DATABASE_USERNAME:oauth2_user}
    password: ${DATABASE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:20}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}
  
  # JPA Configuration
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          time_zone: UTC
          batch_size: 25
          fetch_size: 50
        order_inserts: true
        order_updates: true
        jdbc.batch_versioned_data: true
  
  # Flyway Database Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration/mysql
    schemas: oauth2_authserver
    validate-on-migrate: true
    clean-disabled: true

# Logging Configuration - Production Levels
logging:
  level:
    root: WARN
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
    org.springframework.security.oauth2.server.authorization: INFO
    org.greenbuttonalliance.espi: INFO
    org.hibernate.SQL: WARN
    org.hibernate.orm.jdbc.bind: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE_PATH:/var/log/openespi/authorization-server.log}

# Management Endpoints - Secured for Production
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
    enabled-by-default: false
  endpoint:
    health:
      enabled: true
      show-details: when_authorized
      show-components: when_authorized
    info:
      enabled: true
    metrics:
      enabled: true
  server:
    port: ${MANAGEMENT_PORT:8444}
    ssl:
      enabled: true
  security:
    enabled: true
  info:
    env:
      enabled: true

# ESPI Configuration - Production
espi:
  # Token format: opaque (ESPI standard) - REQUIRED for production
  token:
    format: opaque
  # HTTPS endpoints only in production
  datacustodian:
    endpoint: ${DATACUSTODIAN_ENDPOINT:https://datacustodian.greenbuttonalliance.org}
  thirdparty:
    endpoint: ${THIRDPARTY_ENDPOINT:https://thirdparty.greenbuttonalliance.org}
  # Security settings
  security:
    require-https: true
    allowed-origins: ${ALLOWED_ORIGINS:https://*.greenbuttonalliance.org,https://localhost:*}
    max-redirect-uris: ${MAX_REDIRECT_URIS:5}
    require-https-redirect-uris: true

# Session Configuration - Secure cookies
server:
  servlet:
    session:
      cookie:
        secure: true
        http-only: true
        same-site: strict
      timeout: ${SESSION_TIMEOUT:PT30M}

# Application Information
info:
  app:
    name: OpenESPI Authorization Server
    description: Green Button Alliance OAuth2 Authorization Server - Production
    version: '@project.version@'
    spring-boot-version: '@spring-boot.version@'
    java-version: '@java.version@'
    environment: production
    espi:
      token-format: opaque
      compliance: NAESB ESPI 4.0 Standard
      security-level: production
      https-enforced: true
      tls-version: TLSv1.3-only
      cipher-suites: TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_AES_128_GCM_SHA256

# External Service URLs - All HTTPS in Production
external:
  greenbuttondata:
    base-url: ${GBD_BASE_URL:https://services.greenbuttondata.org}
    datacustodian:
      authorize-url: ${GBD_DC_AUTHORIZE_URL:${external.greenbuttondata.base-url}/DataCustodian/oauth/authorize}
      token-url: ${GBD_DC_TOKEN_URL:${external.greenbuttondata.base-url}/DataCustodian/oauth/token}
      resource-url: ${GBD_DC_RESOURCE_URL:${external.greenbuttondata.base-url}/DataCustodian/espi/1_1/resource}
  
  # Green Button Alliance AWS Sandbox (Production-like)
  gba-aws-sandbox:
    base-url: ${GBA_AWS_BASE_URL:https://sandbox.greenbuttonalliance.org:8443}
    datacustodian:
      authorize-url: ${GBA_AWS_DC_AUTHORIZE_URL:${external.gba-aws-sandbox.base-url}/DataCustodian/oauth/authorize}
      token-url: ${GBA_AWS_DC_TOKEN_URL:${external.gba-aws-sandbox.base-url}/DataCustodian/oauth/token}
      resource-url: ${GBA_AWS_DC_RESOURCE_URL:${external.gba-aws-sandbox.base-url}/DataCustodian/espi/1_1/resource}

# Production-specific client defaults (HTTPS only)
oauth2:
  client:
    defaults:
      redirect-uri-base: ${CLIENT_REDIRECT_BASE:https://app.greenbuttonalliance.org}
      post-logout-redirect-uri-base: ${CLIENT_LOGOUT_REDIRECT_BASE:https://app.greenbuttonalliance.org}
      require-https-redirect-uris: true
      require-authorization-consent: true
      access-token-lifetime: ${ACCESS_TOKEN_LIFETIME:PT6H}
      refresh-token-lifetime: ${REFRESH_TOKEN_LIFETIME:PT60H}
# OpenESPI Authorization Server PostgreSQL Development Configuration
# Development profile with PostgreSQL database

server:
  port: 9999

spring:
  application:
    name: openespi-authorization-server
  
  # PostgreSQL Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/oauth2_authserver
    username: openespi_user
    password: openespi_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
  
  # JPA Configuration
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          time_zone: UTC
  
  # Flyway Database Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration/postgresql
    schemas: public
  
  # Security Configuration
  security:
    oauth2:
      authorizationserver:
        issuer: http://localhost:9999

# ESPI Configuration
espi:
  token:
    format: opaque  # ESPI standard - opaque access tokens
  datacustodian:
    endpoint: http://localhost:8080

# Logging Configuration
logging:
  level:
    org.springframework.security.oauth2: INFO
    org.greenbuttonalliance.espi: DEBUG
    org.hibernate.SQL: INFO
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when_authorized